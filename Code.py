a# -*- coding: utf-8 -*-
"""movierecomandation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OC8UpNNMEqDuZ1aiqT7s_IT_-VK882G0
"""

import requests
from bs4 import BeautifulSoup
import re

# Define a dictionary to map emotions/genres to IMDb URLs
URLS = {
    "Drama": "https://www.imdb.com/search/title/?title_type=feature&genres=drama",
    "Action": "https://www.imdb.com/search/title/?title_type=feature&genres=action",
    "Comedy": "https://www.imdb.com/search/title/?title_type=feature&genres=comedy",
    "Horror": "https://www.imdb.com/search/title/?title_type=feature&genres=horror",
    "Crime": "https://www.imdb.com/search/title/?title_type=feature&genres=crime",
}

# Define headers for requests
HEADERS = {
    "User-Agent": (
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
        "(KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    )
}

def fetch_movie_titles(emotion):
    """
    Fetch movie titles from IMDb based on the given emotion/genre.

    :param emotion: Genre for which to fetch movie titles.
    :return: List of movie titles.
    """
    url = URLS.get(emotion.capitalize())  # Match emotion case-insensitively
    if not url:
        return [], f"Invalid genre: {emotion}. Please select from {', '.join(URLS.keys())}."

    try:
        response = requests.get(url, headers=HEADERS)
        response.raise_for_status()  # Raise error for HTTP issues
    except requests.RequestException as e:
        return [], f"Error fetching data: {e}"

    # Parse the HTML content
    soup = BeautifulSoup(response.text, "html.parser")

    # Extract movie titles from IMDb search results
    titles = [
        a.get_text(strip=True)
        for a in soup.find_all("a", href=re.compile(r"/title/tt\d+/"))
        if a.get_text(strip=True)
    ]
    # Remove duplicates while maintaining order
    unique_titles = list(dict.fromkeys(titles))
    return unique_titles, None

def display_movies(movies, max_titles=12):
    """
    Display movie titles with a limit.

    :param movies: List of movie titles to display.
    :param max_titles: Maximum number of titles to display.
    """
    print("\nTop Movies:")
    for index, title in enumerate(movies[:max_titles], 1):
        print(f"{index}. {title}")

def main():
    """
    Main function to drive the program.
    """
    emotion = input("Enter a genre (Drama, Action, Comedy, Horror, Crime): ").strip()
    movie_titles, error = fetch_movie_titles(emotion)

    if error:
        print(error)
    elif not movie_titles:
        print(f"No movies found for the genre: {emotion}.")
    else:
        max_titles = 14 if emotion.capitalize() in URLS else 12
        display_movies(movie_titles, max_titles)

if __name__ == "__main__":
    main()
